#!/bin/bash
clear
function blue()   { echo -e "\033[34m\033[01m $1 \033[0m"; }
function yellow() { echo -e "\033[33m\033[01m $1 \033[0m"; }
function green()  { echo -e "\033[32m\033[01m $1 \033[0m"; }
function red()    { echo -e "\033[31m\033[01m $1 \033[0m"; }


function preinstall(){
apt install -y sudo locales net-tools dnsutils wget curl rsync ca-certificates unzip git socat build-essential autoconf libtool libpcre3 libpcre3-dev zlib1g zlib1g-dev libatomic-ops-dev libjemalloc-dev expat jq

source /etc/profile

echo "Asia/Shanghai" > /etc/timezone
ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
cat > /etc/default/locale << EOF
LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_US.UTF-8"
LC_TIME="en_US.UTF-8"
LC_COLLATE="en_US.UTF-8"
LC_MONETARY="en_US.UTF-8"
LC_MESSAGES="en_US.UTF-8"
LC_PAPER="en_US.UTF-8"
LC_NAME="en_US.UTF-8"
LC_ADDRESS="en_US.UTF-8"
LC_TELEPHONE="en_US.UTF-8"
LC_MEASUREMENT="en_US.UTF-8"
LC_IDENTIFICATION="en_US.UTF-8"
LC_ALL=en_US.UTF-8
EOF
locale-gen en_US.UTF-8

cat > /etc/security/limits.conf << EOF
* soft nofile 1000000
* hard nofile 1000000
* soft nproc 1000000
* hard nproc 1000000
EOF

echo "ulimit -n 1000000" > ~/.bash_profile

sed -i '/IPv6/d'  /etc/hosts
sed -i '/ip6/d'  /etc/hosts

cat > /etc/sysctl.conf << EOF
vm.overcommit_memory = 1
fs.file-max = 1000000
net.nf_conntrack_max = 1000000
net.netfilter.nf_conntrack_max = 1000000
fs.inotify.max_user_instances = 8192
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv4.ip_local_port_range = 1024 65535
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_syn_retries = 1
net.ipv4.tcp_synack_retries = 1
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_max_syn_backlog = 16384
net.ipv4.tcp_max_tw_buckets = 6000
net.ipv4.tcp_max_orphans = 32768
net.ipv4.tcp_rmem = 4096 87380 8388608
net.ipv4.tcp_wmem = 4096 87380 8388608
net.core.rmem_max = 8388608
net.core.wmem_max = 8388608
net.core.somaxconn = 32768
net.core.netdev_max_backlog = 32768
EOF

if [[ "$(uname -r)" =~ "bbrplus" ]]; then
sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbrplus" >> /etc/sysctl.conf

elif [[ "$(uname -r)" =~ "5.2.0" ]]; then
sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbr2" >> /etc/sysctl.conf

else
sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbr" >> /etc/sysctl.conf
fi

sysctl -p
}



function installpihole(){
mkdir -p /etc/pihole

cat > /etc/pihole/setupVars.conf << EOF
PIHOLE_INTERFACE=$ethernetnum
IPV4_ADDRESS=$localaddr/32
IPV6_ADDRESS=
PIHOLE_DNS_1=8.8.8.8
PIHOLE_DNS_2=1.1.1.1
QUERY_LOGGING=false
INSTALL_WEB_SERVER=false
INSTALL_WEB_INTERFACE=false
LIGHTTPD_ENABLED=false
BLOCKING_ENABLED=true
WEBPASSWORD=0000000000000000000000000000000000000000000000000000000000000000
DNSMASQ_LISTENING=single
DNS_FQDN_REQUIRED=true
DNS_BOGUS_PRIV=true
DNSSEC=false
CONDITIONAL_FORWARDING=false
EOF

echo "" > /etc/pihole/adlists.list

curl -sSL https://raw.githubusercontent.com/pi-hole/pi-hole/master/automated%20install/basic-install.sh | bash /dev/stdin --unattended

systemctl mask dhcpcd --now
systemctl daemon-reload

sed -i '/PIHOLE_DNS/d'  /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_4=8.8.4.4' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_3=1.0.0.1' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_2=8.8.8.8' /etc/pihole/setupVars.conf
sed -i '/IPV6_ADDRESS=/a\PIHOLE_DNS_1=1.1.1.1' /etc/pihole/setupVars.conf
sed -i '/server=/d'  /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=1.1.1.1' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=8.8.8.8' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=1.0.0.1' /etc/dnsmasq.d/01-pihole.conf
sed -i '/interface=/i\server=8.8.4.4' /etc/dnsmasq.d/01-pihole.conf

pihole -f
}



function installiptablesrules(){
cat > /usr/local/bin/iptablesrules-up << EOF
#!/bin/bash

iptables -A INPUT -p udp --dport 53 -i $ethernetnum -j DROP
iptables -A INPUT -p tcp --dport 53 -i $ethernetnum -j DROP
EOF
chmod +x /usr/local/bin/iptablesrules-up

cat > /usr/local/bin/iptablesrules-down << EOF
#!/bin/bash

iptables -t mangle -F
iptables -t mangle -X
iptables -t nat -F
iptables -t nat -X
iptables -F
iptables -X
EOF
chmod +x /usr/local/bin/iptablesrules-down

cat > /etc/systemd/system/iptablesrules.service << EOF
[Unit]
Description=iptablesrules
After=network.target
Wants=network.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/iptablesrules-up
ExecStop=/usr/local/bin/iptablesrules-down
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl restart iptablesrules
systemctl enable iptablesrules
}



function installdoh(){
cd ~
wget -N https://raw.githubusercontent.com/sumsethan/de_GWD/master/resource/dohamd64.zip
unzip dohamd64.zip
mv -f ~/dohamd64/doh-server /usr/local/bin/doh-server
rm -rf ~/dohamd64*
chmod +x /usr/local/bin/doh-server

mkdir -p /etc/dns-over-https/
wget -O /etc/dns-over-https/doh-server.conf https://raw.githubusercontent.com/sumsethan/de_GWD/master/resource/doh-server.conf

mkdir -p /etc/NetworkManager/dispatcher.d/
cat > /etc/NetworkManager/dispatcher.d/doh-server << "EOF"
#!/bin/bash
case "$2" in
    up)
        /usr/bin/systemctl is-active doh-server.service > /dev/null && /usr/bin/systemctl restart doh-server.service
        ;;
    down)
        /usr/bin/systemctl is-active doh-server.service > /dev/null && /usr/bin/systemctl restart doh-server.service
        ;;
    *)
        exit 0
        ;;
esac
EOF
chmod +x /etc/NetworkManager/dispatcher.d/doh-server

cat > /etc/systemd/system/doh-server.service << "EOF"
[Unit]
Description=DNS-over-HTTPS server
After=network.target
Wants=network.target

[Service]
Type=simple
AmbientCapabilities=CAP_NET_BIND_SERVICE
ExecStart=/usr/local/bin/doh-server -conf /etc/dns-over-https/doh-server.conf
Restart=always
RestartSec=3
LimitNPROC=1000000
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload
systemctl restart doh-server
systemctl enable doh-server
cd ~
}



function installv2ray(){
mkdir -p /usr/bin/vtrui
mkdir -p /etc/vtrui
wget -O ~/vtamd64.zip https://raw.githubusercontent.com/sumsethan/de_GWD/master/resource/vtamd64.zip
unzip vtamd64.zip
mv -f ~/vtamd64/vtrui /usr/bin/vtrui/vtrui
mv -f ~/vtamd64/v2ctl /usr/bin/vtrui/v2ctl
rm -rf ~/vtamd64
rm -rf ~/vtamd64.zip
chmod +x /usr/bin/vtrui/vtrui
chmod +x /usr/bin/vtrui/v2ctl

cat > /etc/systemd/system/vtrui.service << EOF
[Unit]
Description=vtrui Service
After=network.target
Wants=network.target

[Service]
Type=simple
PIDFile=/run/vtrui.pid
AmbientCapabilities=CAP_NET_BIND_SERVICE
ExecStart=/usr/bin/vtrui/vtrui -config /etc/vtrui/config.json
Restart=on-failure
RestartPreventExitStatus=23
LimitNPROC=1000000
LimitNOFILE=1000000

[Install]
WantedBy=multi-user.target
EOF

wget -O /etc/vtrui/config.json https://raw.githubusercontent.com/sumsethan/de_GWD/master/resource/v2wt-server.json

jq --arg uuidnum "$uuidnum" '.inbounds[0].settings.clients[0].id=$uuidnum' /etc/vtrui/config.json |\
jq --arg v2path "$v2path" '.inbounds[0].streamSettings.wsSettings.path=$v2path' > /etc/vtrui/temp.json && mv -f /etc/vtrui/temp.json /etc/vtrui/config.json

systemctl daemon-reload
systemctl restart vtrui
systemctl enable vtrui
}



function installnginxlatest(){
cd ~
wget -N https://www.openssl.org/source/openssl-1.1.1b.tar.gz
tar zxvf openssl-1.1.1b.tar.gz
cd openssl-1.1.1b
curl https://raw.githubusercontent.com/hakasenyang/openssl-patch/master/openssl-equal-1.1.1b.patch | patch -p1
curl https://raw.githubusercontent.com/hakasenyang/openssl-patch/master/openssl-1.1.1b-chacha_draft.patch | patch -p1

cd ~
wget -N https://ftp.pcre.org/pub/pcre/pcre-8.43.tar.gz
tar -zxvf pcre-8.43.tar.gz
cd pcre-8.43
autoreconf -f -i

cd ~
git clone https://github.com/cloudflare/zlib.git zlib-cf
cd zlib-cf
./configure --64

cd ~
git clone https://github.com/eustas/ngx_brotli.git
cd ngx_brotli
git submodule update --init --recursive

cd ~
wget -N https://github.com/jemalloc/jemalloc/releases/download/5.2.1/jemalloc-5.2.1.tar.bz2
tar xjvf jemalloc-5.2.1.tar.bz2
cd jemalloc-5.2.1
./configure -prefix=/usr/local/jemalloc --libdir=/usr/local/lib
make -j $(nproc --all) && make install
echo '/usr/local/lib' > /etc/ld.so.conf.d/local.conf
ldconfig

cd ~
mkdir -p /etc/nginx/conf.d
mkdir -p /var/log/nginx
mkdir -p /var/cache/nginx/client_temp
mkdir -p /var/cache/nginx/proxy_temp
mkdir -p /var/cache/nginx/fastcgi_temp
mkdir -p /var/cache/nginx/scgi_temp
mkdir -p /var/cache/nginx/uwsgi_temp

wget -N https://nginx.org/download/nginx-1.17.0.tar.gz
tar zxvf nginx-1.17.0.tar.gz
sed -i 's/CFLAGS="$CFLAGS -g"/#CFLAGS="$CFLAGS -g"/' ~/nginx-1.17.0/auto/cc/gcc
mkdir -p /etc/nginx
cd nginx-1.17.0
curl https://raw.githubusercontent.com/kn007/patch/master/nginx.patch | patch -p1
curl https://raw.githubusercontent.com/hakasenyang/openssl-patch/master/nginx_strict-sni.patch | patch -p1

./configure \
--prefix=/etc/nginx \
--sbin-path=/usr/sbin/nginx \
--conf-path=/etc/nginx/nginx.conf \
--error-log-path=/var/log/nginx/error.log \
--http-log-path=/var/log/nginx/access.log \
--pid-path=/run/nginx.pid \
--lock-path=/run/nginx.lock \
--http-client-body-temp-path=/var/cache/nginx/client_temp \
--http-proxy-temp-path=/var/cache/nginx/proxy_temp \
--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
--http-scgi-temp-path=/var/cache/nginx/scgi_temp \
--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
--user=www-data \
--group=www-data \
--with-compat \
--with-file-aio \
--with-threads \
--with-libatomic \
--with-mail \
--with-mail_ssl_module \
--with-http_realip_module \
--with-http_ssl_module \
--with-http_addition_module \
--with-http_sub_module \
--with-http_dav_module \
--with-http_stub_status_module \
--with-http_flv_module \
--with-http_mp4_module \
--with-http_gunzip_module \
--with-http_slice_module \
--with-http_gzip_static_module \
--with-http_auth_request_module \
--with-http_random_index_module \
--with-http_secure_link_module \
--with-http_degradation_module \
--with-http_spdy_module \
--with-http_v2_module \
--with-http_v2_hpack_enc \
--with-stream \
--with-stream_realip_module \
--with-stream_ssl_module \
--with-stream_ssl_preread_module \
--with-pcre=../pcre-8.43 \
--with-pcre-jit \
--with-zlib=../zlib-cf \
--with-openssl=../openssl-1.1.1b \
--with-openssl-opt='zlib enable-weak-ssl-ciphers enable-ec_nistp_64_gcc_128 -march=native -ljemalloc -Wl,-flto' \
--with-cc-opt='-DTCP_FASTOPEN=23 -m64 -g -O3 -flto -ffast-math -march=native -fstack-protector-strong -fuse-ld=gold --param=ssp-buffer-size=4 -Wformat -Werror=format-security -fno-strict-aliasing -fPIC -Wdate-time -Wp,-D_FORTIFY_SOURCE=2 -gsplit-dwarf' \
--with-ld-opt='-lrt -ljemalloc -Wl,-z,relro -Wl,-z,now -fPIC -flto' \
--add-module=../ngx_brotli

make -j $(nproc --all) && make install

cd ~
cat > /lib/systemd/system/nginx.service << "EOF"
[Unit]
Description=The NGINX HTTP and reverse proxy server
After=syslog.target network.target remote-fs.target nss-lookup.target
Wants=network.target

[Service]
Type=forking
PIDFile=/run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t
ExecStart=/usr/sbin/nginx
ExecReload=/usr/sbin/nginx -s reload
ExecStop=/bin/kill -s QUIT $MAINPID
PrivateTmp=true
Restart=always

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl restart nginx

rm -rf ~/nginx*
rm -rf ~/openssl*
rm -rf ~/pcre*
rm -rf ~/zlib-cf
rm -rf ~/ngx_brotli
rm -rf ~/jemalloc*
}


function nginxconf(){
cat > /etc/nginx/nginx.conf << EOF
user  www-data www-data;
worker_processes auto;
pid   /run/nginx.pid;

    worker_rlimit_nofile 65535;

events {
    use epoll;
    worker_connections  65535;
    multi_accept on;
}

http {
  include mime.types;
  default_type application/octet-stream;

  server_names_hash_bucket_size 128;
  client_header_buffer_size 32k;
  large_client_header_buffers 4 32k;
  client_max_body_size 1024m;
  client_body_buffer_size 10m;

  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 4 64k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;
  fastcgi_intercept_errors on;

  sendfile            on;
  tcp_nodelay         on;
  tcp_nopush          on;
  keepalive_timeout   120;
  types_hash_max_size 2048;
  server_tokens       off;

  gzip                on;
  gzip_disable        "MSIE [1-6]\.";
  gzip_vary           on;
  gzip_proxied        any;
  gzip_comp_level     4;
  gzip_min_length     256;
  gzip_buffers        16 8k;
  gzip_http_version   1.0;
  gzip_types    text/plain
                text/javascript
                text/css
                text/js
                text/xml
                text/x-component
                text/x-json
                font/opentype
                application/x-font-ttf
                application/javascript
                application/x-javascript
                application/x-web-app-manifest+json
                application/json
                application/atom+xml
                application/xml
                application/xml+rss
                application/xhtml+xml
                application/vnd.ms-fontobject
                image/svg+xml
                image/x-icon;

  brotli              on;
  brotli_static       on;
  brotli_comp_level   6;
  brotli_buffers      16 8k;
  brotli_min_length   20;
  brotli_window       16m;
  brotli_types        *;

  access_log off;
  error_log off;

  include /etc/nginx/conf.d/*.conf;
}
EOF
}


function makessl(){
cat > /etc/nginx/conf.d/default.conf << EOF
server {
    listen 80;
    server_name $vpsdomain;
    root /var/www/html;
    index index.php index.html index.htm;
}
EOF

systemctl restart nginx

mkdir -p /var/www/ssl
curl https://get.acme.sh | sh
~/.acme.sh/acme.sh --issue -d $vpsdomain -w /var/www/html --keylength ec-256
~/.acme.sh/acme.sh --installcert -d $vpsdomain --ecc \
               --key-file       /var/www/ssl/$vpsdomain.key  \
               --fullchain-file /var/www/ssl/fullchain.cer \
               --reloadcmd     "systemctl force-reload nginx"
openssl dhparam -out /var/www/ssl/dhparam.pem 2048

cat > /var/www/ssl/update_ocsp_cache << EOF
#!/bin/bash
wget -O intermediate.pem https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
wget -O root.pem https://ssl-tools.net/certificates/dac9024f54d8f6df94935fb1732638ca6ad77c13.pem
mv intermediate.pem /var/www/ssl
mv root.pem /var/www/ssl
cat /var/www/ssl/intermediate.pem > /var/www/ssl/bundle.pem
cat /var/www/ssl/root.pem >> /var/www/ssl/bundle.pem

openssl ocsp -no_nonce \
    -issuer  /var/www/ssl/intermediate.pem \
    -cert    /var/www/ssl/fullchain.cer \
    -CAfile  /var/www/ssl/bundle.pem \
    -VAfile  /var/www/ssl/bundle.pem \
    -url     http://ocsp.int-x3.letsencrypt.org \
    -respout /var/www/ssl/ocsp.resp
EOF
chmod +x /var/www/ssl/update_ocsp_cache
/var/www/ssl/update_ocsp_cache

crontab -l > now.cron
if [[ "$(crontab -l | grep 'update_ocsp_cache' | awk '{print $6}')" != "/var/www/ssl/update_ocsp_cache" ]]; then
echo '0 0 * * 7 /var/www/ssl/update_ocsp_cache' >> now.cron
fi
crontab now.cron
rm -rf now.cron
}


function nginxwebconf(){
cat > /etc/nginx/conf.d/default.conf<< EOF
server {
  listen 80;
  server_name $vpsdomain;
  return 301 https://\$server_name\$request_uri;
}

server {
  listen 443 ssl spdy http2 fastopen=64 reuseport;
  server_name $vpsdomain;
  root /var/www/html;
  index index.php index.html index.htm index.nginx-debian.html;

  ssl_certificate /var/www/ssl/fullchain.cer;
  ssl_certificate_key /var/www/ssl/$vpsdomain.key;
  ssl_dhparam /var/www/ssl/dhparam.pem;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  ssl_ciphers TLS13+AESGCM+AES128:TLS13+AESGCM+AES256:TLS13+CHACHA20:EECDH+ECDSA+AESGCM+AES128:EECDH+ECDSA+CHACHA20:EECDH+ECDSA+AESGCM+AES256:EECDH+ECDSA+AES128+SHA:EECDH+ECDSA+AES256+SHA:EECDH+aRSA+AESGCM+AES128:EECDH+aRSA+CHACHA20:EECDH+aRSA+AESGCM+AES256:EECDH+aRSA+AES128+SHA:EECDH+aRSA+AES256+SHA:RSA+AES128+SHA:RSA+AES256+SHA:RSA+3DES;
  ssl_session_timeout 10m;
  ssl_session_cache shared:le_nginx_SSL:10m;
  ssl_buffer_size 1400;

  ssl_early_data on;
  proxy_set_header Early-Data \$ssl_early_data;

  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_stapling_file /var/www/ssl/ocsp.resp;
  resolver 1.1.1.1 valid=600s;
  resolver_timeout 5s;

  add_header X-Content-Type-Options nosniff;
  add_header X-Robots-Tag none;
  add_header X-Download-Options noopen;
  add_header X-Permitted-Cross-Domain-Policies none;
  add_header X-XSS-Protection "1; mode=block";
  add_header Referrer-Policy no-referrer;
  add_header Strict-Transport-Security "max-age=63072000; includeSubDomains" always;

location /dq {
  proxy_set_header Host \$host;
  proxy_set_header X-Real-IP \$remote_addr;
  proxy_pass              http://localhost:8053/dq;
}

location $v2path {
  proxy_http_version      1.1;
  proxy_set_header Host \$http_host;
  proxy_set_header Upgrade WebSocket;
  proxy_set_header Connection "upgrade";
  proxy_set_header X-Real-IP \$remote_addr;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_read_timeout      86400;
  keepalive_requests      25600;
  keepalive_timeout       300 300;
  proxy_redirect          off;
  proxy_buffering         off;
  proxy_pass              http://127.0.0.1:11811;
}

}
EOF
}


function nginxnextcloudconf(){
cat > /etc/nginx/conf.d/default.conf<< EOF
upstream php-handler {
    server unix:/run/php/php7.3-fpm.sock;
}

server {
  listen 80;
  server_name $vpsdomain;
  return 301 https://\$server_name\$request_uri;
}

server {
  listen 443 ssl spdy http2 fastopen=64 reuseport;
  server_name $vpsdomain;
  root /var/www/html;
  index index.php index.html index.htm index.nginx-debian.html;

  ssl_certificate /var/www/ssl/fullchain.cer;
  ssl_certificate_key /var/www/ssl/$vpsdomain.key;
  ssl_dhparam /var/www/ssl/dhparam.pem;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  ssl_ciphers TLS13+AESGCM+AES128:TLS13+AESGCM+AES256:TLS13+CHACHA20:EECDH+ECDSA+AESGCM+AES128:EECDH+ECDSA+CHACHA20:EECDH+ECDSA+AESGCM+AES256:EECDH+ECDSA+AES128+SHA:EECDH+ECDSA+AES256+SHA:EECDH+aRSA+AESGCM+AES128:EECDH+aRSA+CHACHA20:EECDH+aRSA+AESGCM+AES256:EECDH+aRSA+AES128+SHA:EECDH+aRSA+AES256+SHA:RSA+AES128+SHA:RSA+AES256+SHA:RSA+3DES;
  ssl_session_timeout 10m;
  ssl_session_cache shared:le_nginx_SSL:10m;
  ssl_buffer_size 1400;

  ssl_early_data on;
  proxy_set_header Early-Data \$ssl_early_data;

  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_stapling_file /var/www/ssl/ocsp.resp;
  resolver 8.8.8.8 valid=600s;
  resolver_timeout 5s;

  add_header X-Content-Type-Options nosniff;
  add_header X-Robots-Tag none;
  add_header X-Download-Options noopen;
  add_header X-Permitted-Cross-Domain-Policies none;
  add_header X-XSS-Protection "1; mode=block";
  add_header Referrer-Policy no-referrer;
  add_header Strict-Transport-Security "max-age=63072000; includeSubDomains" always;

  location ~ [^/]\.php(/|$) {
    include fastcgi_params;
    fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
    fastcgi_pass unix:/run/php/php7.3-fpm.sock;
    fastcgi_index index.php;
  }

    fastcgi_hide_header X-Powered-By;

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    location = /.well-known/carddav {
      return 301 \$scheme://\$host/nextcloud/remote.php/dav;
    }
    location = /.well-known/caldav {
      return 301 \$scheme://\$host/nextcloud/remote.php/dav;
    }

    location /.well-known/acme-challenge { }

    location ^~ /nextcloud {

    # set max upload size
    client_max_body_size 10G;
    fastcgi_buffers 64 4K;

        # Uncomment if your server is build with the ngx_pagespeed module
        # This module is currently not supported.
        #pagespeed off;

        location /nextcloud {
            rewrite ^ /nextcloud/index.php\$request_uri;
        }

        location ~ ^\/nextcloud\/(?:build|tests|config|lib|3rdparty|templates|data)\/ {
            deny all;
        }
        location ~ ^\/nextcloud\/(?:\.|autotest|occ|issue|indie|db_|console) {
            deny all;
        }

        location ~ ^\/nextcloud\/(?:index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+)\.php(?:$|\/) {
            fastcgi_split_path_info ^(.+?\.php)(\/.*|)$;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            fastcgi_param PATH_INFO \$fastcgi_path_info;
            fastcgi_param HTTPS on;
            #Avoid sending the security headers twice
            fastcgi_param modHeadersAvailable true;
            fastcgi_param front_controller_active true;
            fastcgi_pass php-handler;
            fastcgi_intercept_errors on;
            fastcgi_request_buffering off;
        }

        location ~ ^\/nextcloud\/(?:updater|oc[ms]-provider)(?:$|\/) {
            try_files \$uri/ =404;
            index index.php;
        }

        # Adding the cache control header for js and css files
        # Make sure it is BELOW the PHP block
        location ~ ^\/nextcloud\/.+[^\/]\.(?:css|js|woff2?|svg|gif)$ {
            try_files \$uri /nextcloud/index.php\$request_uri;
            add_header Cache-Control "public, max-age=15778463";
            # Add headers to serve security related headers  (It is intended
            # to have those duplicated to the ones above)
            # Before enabling Strict-Transport-Security headers please read
            # into this topic first.
            # add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload;";
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection "1; mode=block";
            add_header X-Robots-Tag none;
            add_header X-Download-Options noopen;
            add_header X-Permitted-Cross-Domain-Policies none;
            add_header Referrer-Policy no-referrer;

            # Optional: Don't log access to assets
            access_log off;
        }

        location ~ ^\/nextcloud\/.+[^\/]\.(?:png|html|ttf|ico|jpg|jpeg)$ {
            try_files \$uri /nextcloud/index.php\$request_uri;
            # Optional: Don't log access to other assets
            access_log off;
        }
    }

location /dq {
  proxy_http_version      1.1;
  proxy_set_header Host \$host;
  proxy_set_header X-Real-IP \$remote_addr;
  proxy_redirect          off;
  proxy_buffering         off;
  proxy_pass              http://localhost:8053/dq;
}

location $v2path {
  proxy_http_version      1.1;
  proxy_set_header Host \$http_host;
  proxy_set_header Upgrade WebSocket;
  proxy_set_header Connection "upgrade";
  proxy_set_header X-Real-IP \$remote_addr;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_read_timeout      86400;
  keepalive_requests      25600;
  keepalive_timeout       300 300;
  proxy_redirect          off;
  proxy_buffering         off;
  proxy_pass              http://127.0.0.1:11811;
}

}
EOF
}



function postinstall(){
cat > /usr/local/bin/autoupdate << "EOF"
#!/bin/bash
wget -O ~/update https://raw.githubusercontent.com/sumsethan/de_GWD/master/server

sed -i '$d' ~/update

echo "updategwd" >>  ~/update

chmod +x ~/update
~/update

crontab -l > ~/now.cron
sed -i '/auto/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
rm -rf ~/update
EOF
chmod +x /usr/local/bin/autoupdate

cat > /usr/local/bin/updateGWD << "EOF"
#!/bin/bash
date -s "$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z"
hwclock -w

rm -rf ~/server
rm -rf /var/log/*1
rm -rf /var/log/*2
rm -rf /var/log/*gz

localver=$(awk 'NR==1' /usr/local/bin/version.php)
remotever=$(curl -s https://raw.githubusercontent.com/sumsethan/de_GWD/master/version.php | awk 'NR==1')

if [[ $localver != $remotever ]]; then
crontab -l > ~/now.cron
sed -i '/autoupdate/d' ~/now.cron
echo '30 4 * * *  /usr/local/bin/autoupdate' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
fi
EOF
chmod +x /usr/local/bin/updateGWD
/usr/local/bin/updateGWD

crontab -l > now.cron
if [[ "$(crontab -l | grep 'updateGWD' | awk '{print $6}')" != "/usr/local/bin/updateGWD" ]]; then
echo '0 */2 * * * /usr/local/bin/updateGWD' >> now.cron
fi
crontab now.cron
rm -rf now.cron


indexpage=$(ls /var/www/html/index.* 2> /dev/null | wc -l)

if [ "$indexpage" = "0" ]; then 
wget -N https://raw.githubusercontent.com/sumsethan/de_GWD/master/resource/sample.zip
unzip sample.zip
rsync -r ~/sample/* /var/www/html/
rm -rf ~/sample*
fi

wget -O /usr/local/bin/version.php https://raw.githubusercontent.com/sumsethan/de_GWD/master/version.php
}




installgwd(){
    green "======================"
    green " Input domain (no www)"
    green "======================"
    read vpsdomain

cat > /etc/resolv.conf << EOF
nameserver 1.1.1.1
nameserver 8.8.8.8
EOF

if [[ $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1) = "buster" ]]; then
cat > /etc/apt/sources.list << EOF
deb http://deb.debian.org/debian/ buster main
deb-src http://deb.debian.org/debian/ buster main
deb http://security.debian.org/debian-security buster/updates main
deb-src http://security.debian.org/debian-security buster/updates main
deb http://deb.debian.org/debian/ buster-updates main
deb-src http://deb.debian.org/debian/ buster-updates main
EOF
elif [[ $(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1) = "stretch" ]]; then
cat > /etc/apt/sources.list << EOF
deb http://deb.debian.org/debian/ stretch main
deb-src http://deb.debian.org/debian/ stretch main
deb http://security.debian.org/debian-security stretch/updates main
deb-src http://security.debian.org/debian-security stretch/updates main
deb http://deb.debian.org/debian/ stretch-updates main
deb-src http://deb.debian.org/debian/ stretch-updates main
EOF
fi
apt update && apt upgrade -y

cd ~
preinstall

uuidnum=$(cat /proc/sys/kernel/random/uuid)
v2path="/$(echo $uuidnum | awk '{print substr($0,length($1)-5)}')"

ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print $2}' | cut -d':' -f1 | cut -d'@' -f1 | awk 'NR==1{print}')
localaddr=$(ip -oneline -family inet address show |  awk '{print $4}' | awk 'END {print}' | cut -d '/' -f1)
gatewayaddr=$(route -n |  awk 'NR==3{print $2}')

installpihole

installiptablesrules

cat > /etc/network/interfaces << EOF
source /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

auto $ethernetnum
iface $ethernetnum inet static
  address $localaddr
  netmask 255.255.255.0
  gateway $gatewayaddr
EOF

installdoh

installv2ray

installnginxlatest

nginxconf

makessl

nginxwebconf

mkdir -p /etc/systemd/system/nginx.service.d
printf "[Service]\nExecStartPost=/bin/sleep 0.1\n" > /etc/systemd/system/nginx.service.d/override.conf
systemctl daemon-reload
systemctl restart nginx
systemctl enable nginx

postinstall

blue "--------------------------------------------"
blue  "Install de_GWD [done]"
echo
blue "Domain： $(yellow "$vpsdomain")"
blue "UUID： $(yellow "$uuidnum")"
blue "PATH： $(yellow "$v2path")"
blue "--------------------------------------------"
}



installbbrplus(){
mkdir -p ~/bbrkernel && cd ~/bbrkernel
wget -N https://raw.githubusercontent.com/sumsethan/de_GWD/master/resource/linux-headers-4.14.129-bbrplus.deb
wget -N https://raw.githubusercontent.com/sumsethan/de_GWD/master/resource/linux-image-4.14.129-bbrplus.deb
dpkg -i linux-headers-*.deb
dpkg -i linux-image-*.deb

cat > ~/bbrkernel/clearkernel << EOF
#!/bin/bash
PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i "/net.ipv4.tcp_congestion_control/d" /etc/sysctl.conf
echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbrplus" >> /etc/sysctl.conf
sysctl -p

/usr/bin/apt purge -y linux-image*amd64
update-grub

crontab -l > ~/now.cron
sed -i '/clearkernel/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
rm -rf ~/bbrkernel

reboot
EOF

chmod +x ~/bbrkernel/clearkernel

crontab -l > ~/now.cron
echo '@reboot ~/bbrkernel/clearkernel' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

blue "-----------------------"
blue  "Install bbrplus [done]"
blue "-----------------------"

reboot
}



installbbr2(){
mkdir -p ~/bbrkernel && cd ~/bbrkernel
wget -N https://raw.githubusercontent.com/xiya233/bbr2/master/debian/linux-headers-5.2.0-rc3%2B_5.2.0-rc3%2B-1_amd64.deb
wget -N https://raw.githubusercontent.com/xiya233/bbr2/master/debian/linux-image-5.2.0-rc3%2B_5.2.0-rc3%2B-1_amd64.deb
dpkg -i linux-headers-*.deb
dpkg -i linux-image-*.deb

cat > ~/bbrkernel/clearkernel << EOF
#!/bin/bash
PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

sed -i "/net.core.default_qdisc/d" /etc/sysctl.conf
sed -i "/net.ipv4.tcp_congestion_control/d" /etc/sysctl.conf
echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control = bbr2" >> /etc/sysctl.conf
sysctl -p

/usr/bin/apt purge -y linux-image-4.14.129-bbrplus
/usr/bin/apt purge -y linux-image-4*
update-grub

crontab -l > ~/now.cron
sed -i '/clearkernel/d' ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
rm -rf ~/bbrkernel

reboot
EOF

chmod +x ~/bbrkernel/clearkernel

crontab -l > ~/now.cron
echo '@reboot ~/bbrkernel/clearkernel' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron

blue "----------------------"
blue  "Install bbr2.0 [done]"
blue "----------------------"

reboot
}



installnextcloud(){
    green "=================="
    green " Datadase user"
    green "=================="
    read sqluser

    green "=================="
    green " Datadase password"
    green "=================="
    read sqlpw

    green "=================="
    green " Datadase name"
    green "=================="
    read sqlname

debianx=$(cat /etc/os-release | grep VERSION= | cut -d '(' -f2 | cut -d ')' -f1)

dpkg --configure -a

apt -y install software-properties-common dirmngr apt-transport-https lsb-release

apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xF1656F24C74CD1D8
add-apt-repository "deb [arch=amd64] http://mariadb.nethub.com.hk/repo/10.3/debian $debianx main"

wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg
echo "deb https://packages.sury.org/php/ $debianx main" > /etc/apt/sources.list.d/php.list

apt update

apt install -y mariadb-server

mysql_secure_installation

green "再次输入刚创建的MariaDB root用户密码"
read sqlrootpw

cat > ~/.my.cnf << EOF
[client]
user=root
password=$sqlrootpw
EOF

mysql -e "create database $sqlname default charset utf8 collate utf8_general_ci;"
mysql -e "CREATE USER '$sqluser'@'localhost' IDENTIFIED BY '$sqlpw';"
mysql -e "grant all privileges on $sqlname.* TO '$sqluser'@'localhost';"

rm -rf ~/.my.cnf

sed -i '/malloc-lib/d' /etc/mysql/my.cnf
sed -i '/\[mysqld_safe\]/a\malloc-lib = \/usr\/local\/lib\/libjemalloc.so' /etc/mysql/my.cnf

sed -i "/bind-address/s/^/#/g" /etc/mysql/my.cnf
sed -i '/skip-networking = 1/d' /etc/mysql/my.cnf
sed -i '/skip-networking/a\skip-networking = 1' /etc/mysql/my.cnf

systemctl restart mariadb

apt install -y php7.3 php7.3-fpm php7.3-cli php7.3-common php7.3-dev php7.3-mysql php7.3-curl php7.3-dom php-dompdf php7.3-json php7.3-gd php7.3-mbstring php7.3-zip php7.3-bz2 php7.3-ldap php7.3-smbclient php7.3-imap php7.3-gmp php7.3-redis php7.3-imagick php7.3-opcache php7.3-xml php7.3-xmlrpc php7.3-intl php7.3-apcu php-redis redis-server imagemagick ffmpeg
cat > /etc/php/7.3/fpm/php-fpm.conf << EOF
;;;;;;;;;;;;;;;;;;;;;
; FPM Configuration ;
;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;
; Global Options ;
;;;;;;;;;;;;;;;;;;

[global]
pid = /run/php/php7.3-fpm.pid
error_log = /var/log/php7.3-fpm.log
log_level = warning

emergency_restart_threshold = 20
emergency_restart_interval = 60s
process_control_timeout = 10s
daemonize = yes

rlimit_files = 1000000
rlimit_core = 0

include=/etc/php/7.3/fpm/pool.d/*.conf
EOF

cat > /etc/php/7.3/fpm/pool.d/www.conf << EOF
;;;;;;;;;;;;;;;;;;;;
; Pool Definitions ;
;;;;;;;;;;;;;;;;;;;;
[www]
user = www-data
group = www-data
listen = /run/php/php7.3-fpm.sock
listen.backlog = -1
listen.allowed_clients = 127.0.0.1
listen.owner = www-data
listen.group = www-data
listen.mode = 0666

pm = dynamic
pm.max_children = 20
pm.start_servers = 5
pm.min_spare_servers = 5
pm.max_spare_servers = 20
pm.max_requests = 500
pm.process_idle_timeout = 10s
request_terminate_timeout = 320s
request_slowlog_timeout = 0

pm.status_path = /status

catch_workers_output = yes
env[HOSTNAME] = \$HOSTNAME
env[PATH] = /usr/local/bin:/usr/bin:/bin
env[TMP] = /tmp
env[TMPDIR] = /tmp
env[TEMP] = /tmp
EOF

sed -i "/memory_limit/c\memory_limit = 512M" /etc/php/7.3/fpm/php.ini
echo "apc.enable_cli = 1" >> /etc/php/7.3/fpm/php.ini

cat > /lib/systemd/system/php7.3-fpm.service << "EOF"
[Unit]
Description=The PHP 7.3 FastCGI Process Manager
Documentation=man:php-fpm7.3(8)
After=network.target
Wants=network.target

[Service]
Type=notify
PIDFile=/run/php/php7.3-fpm.pid
ExecStart=/usr/sbin/php-fpm7.3 --nodaemonize --fpm-config /etc/php/7.3/fpm/php-fpm.conf
ExecReload=/bin/kill -USR2 $MAINPID
PrivateTmp=true
Restart=always

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl restart php7.3-fpm
systemctl enable php7.3-fpm

vpsdomain=$(cd /var/www/ssl/ && ls 2>&1 | grep *key | rev | cut -d . -f1 --complement | rev)

v2path=$(jq -r '.inbounds[0].streamSettings.wsSettings.path' /etc/vtrui/config.json)

nginxnextcloudconf

systemctl restart nginx

wget -O ~/setup-nextcloud.php https://download.nextcloud.com/server/installer/setup-nextcloud.php
mv -f ~/setup-nextcloud.php /var/www/html/
chown -R www-data:www-data /var/www/html/

blue "------------------------------------"
blue "  Datadase user:"
yellow "$sqluser"
blue "  Datadase password:"
yellow "$sqlpw"
blue "  Datadase name:"
yellow "$sqlname"
blue "  Nextcloud Installation address:"
yellow "$vpsdomain/setup-nextcloud.php"
blue "------------------------------------"
}



setnextcloudcache(){
sed -i "/port 6379/c\port 0" /etc/redis/redis.conf
sed -i "/unixsocket \/var\/run\/redis\/redis/c\unixsocket \/run\/redis\/redis-server.sock" /etc/redis/redis.conf
sed -i "/unixsocketperm 700/c\unixsocketperm 770" /etc/redis/redis.conf

sudo usermod -aG redis www-data

sudo chown -R redis:www-data /run/redis

systemctl restart redis-server

systemctl restart php7.3-fpm

sed -i '/installed/,$d' /var/www/html/nextcloud/config/config.php
cat >> /var/www/html/nextcloud/config/config.php << "EOF"
'installed' => true,

'enabledPreviewProviders' =>
  array (
    0 => 'OC\Preview\PNG',
    1 => 'OC\Preview\JPEG',
    2 => 'OC\Preview\GIF',
    3 => 'OC\Preview\HEIC',
    4 => 'OC\Preview\BMP',
    5 => 'OC\Preview\XBitmap',
    6 => 'OC\Preview\MP3',
    7 => 'OC\Preview\TXT',
    8 => 'OC\Preview\MarkDown',
    9 => 'OC\Preview\Movie',
    10 => 'OC\Preview\PDF',
  ),

'memcache.local' => '\\OC\\Memcache\\APCu',
'memcache.distributed' => '\\OC\\Memcache\\Redis',
'memcache.locking' => '\\OC\\Memcache\\Redis',
'filelocking.enabled' => true,
'filelocking.ttl' => 60*60,
'filelocking.debug' => false,
'redis' =>
  array (
    'host' => '/var/run/redis/redis-server.sock',
    'port' => 0,
    'timeout' => 0.0,
  ),
'max_filesize_animated_gifs_public_sharing' => -1,
'loglevel' => 0,
);
EOF

blue "-----------------------------"
blue "Config Nextcloud cache [done]"
blue "-----------------------------"
}



changestaticip(){
    green "========="
    green "Address"
    green "========="
    read localaddr

    green "========="
    green "Gateway"
    green "========="
    read gatewayaddr

sed -i "/address/c\address $localaddr"  /etc/network/interfaces
sed -i "/gateway/c\gateway $gatewayaddr"  /etc/network/interfaces
sed -i "/IPV4_ADDRESS=/c\IPV4_ADDRESS=$localaddr/24"  /etc/pihole/setupVars.conf

blue "-----------------"
blue  "Change IP [done]"
blue "-----------------"
}



changedomain(){
    green "================================"
    green " Input the new domain ( no www )"
    green "================================"
    read vpsdomain

v2path=$(jq -r '.inbounds[0].streamSettings.wsSettings.path' /etc/vtrui/config.json)

rm -rf /var/www/ssl

makessl

if [[ -d "/var/www/html/nextcloud" ]]; then
  nginxnextcloudconf
else
  nginxwebconf
fi

systemctl restart nginx

/usr/local/bin/updateGWD

blue "-----------------------------------------------"
blue "Change domain and issue new certificates [done]"
blue "-----------------------------------------------"
}



changev2rayverify(){
systemctl stop vtrui
systemctl stop nginx

    green "========="
    green "New UUID"
    green "========="
    read nuuid

    green "========="
    green "New path"
    green "========="
    read npath

sed -i "$(sed -n -e '/location/=' /etc/nginx/conf.d/default.conf | awk 'END{print}')s/.*/location "'\'$npath''" {/" /etc/nginx/conf.d/default.conf

systemctl restart nginx

jq --arg nuuid "$nuuid" '.inbounds[0].settings.clients[0].id=$nuuid' /etc/vtrui/config.json |\
jq --arg npath "$npath" '.inbounds[0].streamSettings.wsSettings.path=$npath' > /etc/vtrui/temp.json && mv -f /etc/vtrui/temp.json /etc/vtrui/config.json

systemctl restart vtrui
blue "------------------------------"
blue  "Change v2ray UUID&path [done]"
blue "------------------------------"
}



changev2rayupstream(){
    green "==================================================="
    green "Y. Change v2ray upstream / N. Delete v2ray upstream"
    green "==================================================="
    read v2rayupstreamyn

if [[ "$v2rayupstreamyn" = "Y" ]] || [[ "$v2rayupstreamyn" = "y" ]]; then
sed -i '/"outbounds":/,$d' /etc/vtrui/config.json

    green "====================="
    green "v2ray upstream domain"
    green "====================="
    read upstreamdomain

    green "====================="
    green "v2ray upstream UUID"
    green "====================="
    read upstreamuuid

    green "====================="
    green "v2ray upstream path"
    green "====================="
    read upstreampath

cat >> /etc/vtrui/config.json << EOF
  "outbounds": [
    {
    "mux": { "enabled": true },
    "protocol": "vmess",
    "settings": { "vnext": [{
      "address": "$upstreamdomain",
      "port": 443,
      "users": [{
        "id": "$upstreamuuid",
        "level": 1,
        "alterId": 32
        }]
      }]},
    "streamSettings": {
      "network": "ws",
      "wsSettings": {
        "path": "$upstreampath",
        "headers": {
          "Host": "$upstreamdomain"
          }
        },
      "security": "tls",
      "tlsSettings": {
        "serverName": "$upstreamdomain",
        "allowInsecure": false
        },
      "sockopt": { "mark": 255 }
      }
    }
  ]
}
EOF
systemctl restart vtrui
blue "-----------------------------"
blue  "Change v2ray upstream [done]"
blue "-----------------------------"

elif [[ "$v2rayupstreamyn" = "N" ]] || [[ "$v2rayupstreamyn" = "n" ]]; then
sed -i '/"outbounds":/,$d' /etc/vtrui/config.json
cat >> /etc/vtrui/config.json << EOF
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {}
    }
  ]
}
EOF
systemctl restart vtrui
blue "-----------------------------"
blue  "Delete v2ray upstream [done]"
blue "-----------------------------"
fi
}



updatepihole(){
ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print $2}' | cut -d':' -f1 | cut -d'@' -f1 | awk 'NR==1{print}')
localaddr=$(ip -oneline -family inet address show |  awk '{print $4}' | awk 'END {print}' | cut -d '/' -f1)

installpihole

blue "---------------------"
blue "Update Pi-hole [done]"
blue "---------------------"
}



updategwd(){
cd ~
preinstall
ethernetnum=$(ip --oneline link show up | grep -v "lo" | awk '{print $2}' | cut -d':' -f1 | cut -d'@' -f1 | awk 'NR==1{print}')

vpsdomain=$(cd /var/www/ssl/ && ls 2>&1 | grep *key | rev | cut -d . -f1 --complement | rev)
uuidnum=$(jq -r '.inbounds[0].settings.clients[0].id' /etc/vtrui/config.json)
v2path=$(jq -r '.inbounds[0].streamSettings.wsSettings.path' /etc/vtrui/config.json)

v2uuids=$(jq -r '.inbounds[].settings.clients[].id' /etc/vtrui/config.json)

{
for v2uuid in $v2uuids; do
echo '{"id": "'$v2uuid'", "level": 1, "alterId": 32}'
done
} > /tmp/v2uuid

installiptablesrules

installdoh

systemctl stop vtrui

installv2ray

jq 'del(.inbounds[0].settings.clients[])' /etc/vtrui/config.json > /etc/vtrui/temp.json

cat /tmp/v2uuid | while read line
do
jq --argjson v2uuid "$line" '.inbounds[0].settings.clients+=[$v2uuid]' /etc/vtrui/temp.json > /etc/vtrui/temp2.json && mv -f /etc/vtrui/temp2.json /etc/vtrui/temp.json
done

mv -f /etc/vtrui/temp.json /etc/vtrui/config.json

systemctl restart vtrui

rm -rf /tmp/v2uuid

nginxconf

if [[ -d "/var/www/html/nextcloud" ]]; then
  nginxnextcloudconf
else
  nginxwebconf
fi

systemctl restart nginx

postinstall
blue "---------------------"
blue  "Update de_GWD [done]"
blue "---------------------"
}



autoupdateGWD(){
    green "=============================================="
    green "Y. Turn on autoupdate / N. Turn off autoupdate"
    green "=============================================="
    read autoupdateswitch

if [[ "$autoupdateswitch" = "Y" ]] || [[ "$autoupdateswitch" = "y" ]]; then 
sed -i '/localver=/,$d' /usr/local/bin/updateGWD

cat >> /usr/local/bin/updateGWD << "EOF"
localver=$(awk 'NR==1' /usr/local/bin/version.php)
remotever=$(curl -s https://raw.githubusercontent.com/sumsethan/de_GWD/master/version.php | awk 'NR==1')

if [[ $localver < $remotever ]]; then
crontab -l > ~/now.cron
sed -i '/autoupdate/d' ~/now.cron
echo '0 4 * * *  /usr/local/bin/autoupdate' >> ~/now.cron
crontab ~/now.cron
rm -rf ~/now.cron
fi
EOF
blue "--------------------------"
blue  "Autoupdate turn on [done]"
blue "--------------------------"

elif [[ "$autoupdateswitch" = "N" ]] || [[ "$autoupdateswitch" = "n" ]]; then
sed -i '/localver=/,$d' /usr/local/bin/updateGWD
blue "---------------------------"
blue  "Autoupdate turn off [done]"
blue "---------------------------"
fi
}




start_menu(){
statusgod=$(green "✔︎")
statusbad=$(red "✘")
statusnone=$(yellow "-")


if [[ $(systemctl is-active vtrui) = "active" ]]; then
    echo "[$statusgod] V2RAY        [working]"
elif [[ ! -f "/usr/bin/vtrui" ]]; then
    echo "[$statusbad] V2RAY        [not Installed]"
else
    echo "[$statusbad] V2RAY        [start failed]"
fi


if [[ $(systemctl is-active nginx) = "active" ]]; then
    echo "[$statusgod] NGINX        [working]"
elif [[ ! -d "/usr/local/nginx" ]] && [[ ! -d "/etc/nginx" ]]; then
    echo "[$statusbad] NGINX        [not Installed]"
else
    echo "[$statusbad] NGINX        [start failed]"
fi


if [[ $(systemctl is-active doh-server) = "active" ]]; then
    echo "[$statusgod] DoH server   [working]"
elif [[ ! -f "/usr/local/bin/doh-server" ]]; then
    echo "[$statusbad] DoH server   [not Installed]"
else
    echo "[$statusbad] DoH server   [start failed]"
fi


if [[ $(systemctl is-active pihole-FTL) = "active" ]]; then
    echo "[$statusgod] Pi-hole      [working]"
elif [[ ! -f "/usr/local/bin/pihole" ]]; then
    echo "[$statusbad] Pi-hole      [not installed]"
else
    echo "[$statusbad] Pi-hole      [start failed]"
fi

if [[ -d "/var/www/html/nextcloud" ]]; then
    echo "[$statusgod] Nextcloud    [installed]"
else
    echo "[$statusnone] Nextcloud    [not installed]"
fi

blue "--------------------------"
blue  "当前bbr方案：$(echo $(sysctl net.ipv4.tcp_congestion_control) | cut -d ' ' -f3)"
blue "--------------------------"

    green "=========================="
    green "         Server            "
    green "Require: Debian 9/10       "
    green "Author:  JacyL4            "
    green "=========================="
    blue  "Version:$(echo $(awk 'NR==1' /usr/local/bin/version.php))"
    echo
    green  "1. Install de_GWD"
    green  "11.Install bbrplus and reboot（Debian 9）"
    green  "12.Install bbr2.0 and reboot（Debian 9/10）"
    blue   "3. Install PHP+MariaDB+Nextcloud"
    blue   "4. Config Nextcloud cache"
    red    "5. Change static IP"
    red    "6. Change domain and issue new certificates"
    yellow "7. Change v2ray UUID & path"
    yellow "8. Set v2ray upsteram"
    yellow "9. Update Pi-hole"
    yellow "0. Update de_GWD"
    red    "00.Autoupdate turn on/off"
    red    "CTRL+C EXIT"
    echo
    read -p "Select:" num
    case "$num" in
    1)
    installgwd
    start_menu
    ;;
    11)
    installbbrplus
    start_menu
    ;;
    12)
    installbbr2
    start_menu
    ;;
    3)
    installnextcloud
    start_menu
    ;;
    4)
    setnextcloudcache
    start_menu
    ;;
    5)
    changestaticip
    start_menu
    ;;
    6)
    changedomain
    start_menu
    ;;
    7)
    changev2rayverify
    start_menu
    ;;
    8)
    changev2rayupstream
    start_menu
    ;;
    9)
    updatepihole
    start_menu
    ;;
    0)
    updategwd
    start_menu
    ;;
    00)
    autoupdateGWD
    start_menu
    ;;
    *)
    clear
    red "Wrong number"
    sleep 1s
    start_menu
    ;;
    esac
}

start_menu
